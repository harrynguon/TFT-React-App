{"version":3,"sources":["components/navigation/NavBar.js","components/navigation/Footer.js","components/home/Champion.js","components/home/ChampionTable.js","components/home/Home.js","components/home/ChampionInfo.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js","apiKey.js"],"names":["getChampName","url","championInUrl","urlAsArray","split","champName","length","to","className","withRouter","props","console","log","location","pathname","indexOf","Footer","Champion","champion","name","key","id","origin","join","class","ChampionTable","sortTable","field","dataCopy","state","championData","slice","sort","ascChampion","reverse","setState","a","b","localeCompare","ascOrigins","ascClasses","onClick","this","map","champ","React","Component","connect","reducer","ownProps","match","params","filter","champData","cost","items","item","stats","offense","damage","attackSpeed","dps","range","defense","health","armor","magicResist","ability","description","type","manaCost","manaStart","stat","value","App","exact","path","component","Home","ChampionInfo","Boolean","window","hostname","rootReducer","action","axios","get","then","res","renderApp","Object","entries","data","catch","err","initialReducerState","store","createStore","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93183c6d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nconst NavBar = (props) => {\r\n    console.log(props, 'navbarjs');\r\n    return (\r\n        <nav className=\"nav-extended\">\r\n            <div className=\"nav-wrapper grey darken-4\">\r\n                <div className=\"container\">\r\n                    <Link to=\"/\" className=\"brand-logo center hide-on-small-only\">Teamfight Tactics Data App</Link> \r\n                    <Link to=\"/\" className=\"brand-logo center hide-on-med-and-up\">TFT Data App</Link> \r\n                </div>\r\n            </div>\r\n            <div className=\"nav-content grey\">\r\n                { /** Check to see if URL contains champion or not */ }\r\n                <div className=\"center\">\r\n                    <Link to=\"/\" className=\"breadcrumb\"> Home </Link>\r\n                    { getChampName(props.location.pathname, props.location.pathname.indexOf('/champion') > -1) }\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nconst getChampName = (url, championInUrl) => {\r\n    if (!championInUrl) {\r\n        return '';\r\n    }\r\n    const urlAsArray = url.split('/');\r\n    const champName = urlAsArray[urlAsArray.length - 1];\r\n    return <Link to={`/champion/${champName}`} className=\"breadcrumb\">{ champName }</Link> \r\n;}\r\n\r\n\r\n// Pass props to NavBar\r\nexport default withRouter(NavBar);\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    // <footer className=\"page-footer grey darken-3\">\r\n    //     <div className=\"container\">\r\n    //         <div className=\"row\">\r\n    //                 <div>\r\n    //                 <p className=\"grey-text text-lighten-4 left\">All data is pulled from the Riot Games API. A valid internet connection is required.</p>\r\n    //                 </div>\r\n    //         </div>\r\n    //     </div>\r\n    //     <div className=\"footer-copyright grey darken-4\">\r\n    //         <div className=\"container\">\r\n    //         <p className=\"left\">Copyright © 2019 Harry Nguon</p>\r\n    //         <p className=\"right\">All data is pulled from the Riot Games API. A valid internet connection is required.</p>\r\n    //         </div>\r\n    //     </div>\r\n    // </footer>\r\n\r\n\r\n    <footer className=\"grey\">\r\n        <div className=\"container section\">\r\n            <div className=\"center grey-text text-lighten-4\">\r\n                All data is pulled from the Riot Games API. A valid internet connection is required.\r\n                \r\n            </div>\r\n        </div>\r\n        <div className=\"section grey darken-1 no-padding\">\r\n        <div className=\"center grey-text text-lighten-2\">Copyright © 2019 Harry Nguon</div>\r\n        </div>\r\n        \r\n    </footer>\r\n\r\n\r\n    // <footer className=\"page-footer grey no-padding\">\r\n    //     {/** Footer requires two components in the framework, so colour both the same colour as only using one */}\r\n    //     <div className=\"footer-copyright grey\">\r\n    //         <div className=\"container\">\r\n    //                 <div className=\"col l6\">\r\n    //                     <p className=\"left\">All data is pulled from the Riot Games API. A valid internet connection is required.</p>\r\n    //                 </div>\r\n    //                 <div className=\"col l6\">\r\n    //                     <p className=\"right\">Copyright © 2019 Harry Nguon</p>\r\n    //                 </div> \r\n    //         </div>\r\n    //     </div>\r\n    // </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Champion = (props) => {\r\n    const champion = props.champion;\r\n    return (\r\n        <tr >\r\n            <td>\r\n                <Link to={`/champion/${champion.name}`} key={champion.id} >\r\n                        { champion.name }\r\n                </Link>\r\n            </td>\r\n            {/** As a champion can have multiple origins/classes, join them by commas */}\r\n            <td>{ champion.origin.join(', ') }</td>\r\n            <td>{ champion.class.join(', ') }</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Champion;\r\n","import React from 'react';\r\nimport Champion from './Champion';\r\n\r\nclass ChampionTable extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        // Create state for manipulating the table data via sorting\r\n        this.state = {\r\n            ascChampion: true,\r\n            ascOrigins: true,\r\n            ascClasses: true,\r\n            championData: props.championData\r\n        };\r\n    }\r\n\r\n    // Currying to pass parameters through without calling the function in onClick()\r\n    sortTable = (field) => () => {\r\n        // Clone the data before working on it\r\n        let dataCopy = this.state.championData.slice();\r\n        switch (field) {\r\n            case 'champions': \r\n                dataCopy.sort();\r\n                if (this.state.ascChampion) {\r\n                    dataCopy.reverse();\r\n                }\r\n                this.setState({\r\n                    ascChampion: this.state.ascChampion ? false : true,\r\n                    championData: dataCopy\r\n                });\r\n                break;\r\n            case 'origins': \r\n                dataCopy.sort((a, b) => a[1].origin[0].localeCompare(b[1].origin[0]));\r\n                if (this.state.ascOrigins) {\r\n                    dataCopy.reverse();\r\n                }\r\n                this.setState({\r\n                    ascOrigins: this.state.ascOrigins ? false : true,\r\n                    championData: dataCopy\r\n                });\r\n                break;\r\n            case 'classes': \r\n                dataCopy.sort((a, b) => a[1].class[0].localeCompare(b[1].class[0]));\r\n                if (this.state.ascClasses) {\r\n                    dataCopy.reverse();\r\n                }\r\n                this.setState({\r\n                    ascClasses: this.state.ascClasses ? false : true,\r\n                    championData: dataCopy\r\n                });\r\n                break;\r\n            default: \r\n                return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <table className=\"highlight centered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"rowTableActive\" onClick={this.sortTable('champions')}>Champion</th>\r\n                            <th className=\"rowTableActive\" onClick={this.sortTable('origins')}>Origin</th>\r\n                            <th className=\"rowTableActive\" onClick={this.sortTable('classes')}>Class</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    { this.state.championData.map(champ => <Champion champion={champ[1]} \r\n                                                                key={champ[1].id}\r\n                                                                />) }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ChampionTable;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ChampionTable from './ChampionTable';\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row center\">\r\n                \r\n            </div>\r\n            <div className=\"row center\">\r\n                <p className=\"flow-text\">This is a very basic <i>React+Redux</i> Web Application that retrieves and displays \r\n                data for all champions in Teamfight Tactics.</p>\r\n                <p className=\"flow-text\">Redux is used to store the data that gets retrieved in the application. The application then uses the Redux store to retrieve the data.</p>\r\n                <p className=\"flow-text\">Right below is the table of all the champions in Teamfight Tactics. All data is pulled from the Riot Games API. </p>\r\n                <p className=\"flow-text\">You can click on a champion to view detailed stats about them.</p>\r\n            </div>\r\n            <div className=\"row center\">\r\n                <div className=\"hide-on-med-and-up scrollableTable\">\r\n                    <ChampionTable championData={props.championData} />\r\n                </div>\r\n                <div className=\"hide-on-small-only\">\r\n                    <ChampionTable championData={props.championData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (reducer) => {\r\n    return {\r\n        championData: reducer.championData\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst ChampionInfo = (props) => {\r\n    const champion = props.champion;\r\n    // ability\r\n    // class\r\n    // cost\r\n    // id\r\n    // items\r\n    // key\r\n    // name\r\n    // origin\r\n    // stats\r\n    return (\r\n        <div className=\"container center\">\r\n            <h4>Champion: <b>{ champion.name }</b></h4>\r\n\r\n            <div className=\"divider\" />\r\n            <div className=\"section\" />\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 l6\">\r\n                    <div className=\"card grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                            <span className=\"card-title\"><b>About</b></span>\r\n                            <p>ID: { champion.id }</p>\r\n                                <p>Origin: { champion.origin.join(', ') }</p>\r\n                                <p>Class: { champion.class.join(', ') }</p>\r\n                                <p>Cost: { champion.cost }</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col s12 m6 l6\">\r\n                    <div className=\"card grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                            <span className=\"card-title\"><b>Preferred items</b></span>\r\n                            <ul className=\"collection\">\r\n                                { champion.items.map(item =>    <li className=\"collection-item grey white-text\"\r\n                                                                    key={champion.id+item} \r\n                                                                >\r\n                                                                    { item }\r\n                                                                </li>) \r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 l6\">\r\n                    <div className=\"card grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                            <span className=\"card-title\"><b>Stats</b></span>\r\n                            <h6><u>Offense</u></h6>\r\n                            <p>Damage: { champion.stats.offense.damage }</p>\r\n                            <p>Attack Speed: { champion.stats.offense.attackSpeed }</p>\r\n                            <p>DPS: { champion.stats.offense.dps }</p>\r\n                            <p>Range: { champion.stats.offense.range }</p>\r\n                            <h6><u>Defense</u></h6>\r\n                            <p>Health: { champion.stats.defense.health }</p>\r\n                            <p>Armor: { champion.stats.defense.armor }</p>\r\n                            <p>Magic Resist: { champion.stats.defense.magicResist }</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col s12 m6 l6\">\r\n                    <div className=\"card grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                            <span className=\"card-title\"><b>Ability</b></span>\r\n                            <p>Name: { champion.ability.name }</p>\r\n                            Description:    <blockquote>\r\n                                                { champion.ability.description }\r\n                                            </blockquote>\r\n                            <p>Type: { champion.ability.type }</p>\r\n                            <p>Mana Cost: { champion.ability.manaCost }</p>\r\n                            <p>Mana Start: { champion.ability.manaStart }</p>\r\n                            Stats:\r\n                            <ul className=\"collection\">\r\n                                { champion.ability\r\n                                    .stats\r\n                                    .map(stat =>    <li className=\"collection-item grey white-text\" \r\n                                                        key={champion.id + stat.type} \r\n                                                        >\r\n                                                            Type: { stat.type } <br></br> \r\n                                                            Value: { stat.value }\r\n                                                    </li>)\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/**  UNFORMATTED DATA\r\n\r\n            <div className=\"section\">\r\n                <h5>About</h5>\r\n                <p>ID: { champion.id }</p>\r\n                <p>Origin: { champion.origin.join(', ') }</p>\r\n                <p>Class: { champion.class.join(', ') }</p>\r\n                <p>Cost: { champion.cost }</p>\r\n            </div>\r\n\r\n            <div className=\"divider\" />\r\n\r\n            <div className=\"section\">\r\n                <h5>Preferred Items</h5>\r\n                <ul className=\"collection\">\r\n                    { champion.items.map(item => <li className=\"collection-item\" key={champion.id+item} >{ item }</li>) }\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"divider\" />\r\n\r\n            <div className=\"section\">\r\n                <h5>Stats</h5>\r\n                <h6>Offense</h6>\r\n                <p>Damage: { champion.stats.offense.damage }</p>\r\n                <p>Attack Speed: { champion.stats.offense.attackSpeed }</p>\r\n                <p>DPS: { champion.stats.offense.dps }</p>\r\n                <p>Range: { champion.stats.offense.range }</p>\r\n                <h6>Defense</h6>\r\n                <p>Health: { champion.stats.defense.health }</p>\r\n                <p>Armor: { champion.stats.defense.armor }</p>\r\n                <p>Magic Resist: { champion.stats.defense.magicResist }</p>\r\n            </div>\r\n\r\n            <div className=\"divider\" />\r\n\r\n            <div className=\"section\">\r\n                <h5>Ability</h5>\r\n                <p>Name: { champion.ability.name }</p>\r\n                Description: <blockquote>{ champion.ability.description }</blockquote>\r\n                <p>Type: { champion.ability.type }</p>\r\n                <p>Mana Cost: { champion.ability.manaCost }</p>\r\n                <p>Mana Start: { champion.ability.manaStart }</p>\r\n                Stats:\r\n                <ul className=\"collection\">\r\n                    { champion.ability\r\n                                .stats\r\n                                .map(stat =>    <li className=\"collection-item\" \r\n                                                    key={champion.id + stat.type} \r\n                                                    >\r\n                                                        Type: { stat.type } <br></br> \r\n                                                        Value: { stat.value }\r\n                                                </li>) }\r\n                </ul>\r\n            </div>\r\n            */}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (reducer, ownProps) => {\r\n    // Grab ':champName' from router\r\n    const name = ownProps.match.params.champName;\r\n    // Grab the champion from the store\r\n    const champion = reducer.championData\r\n                            .filter(champData => champData[1].name === name);\r\n    // Grab the array of the champion with all the actual data in it\r\n    // It returns an array of an array, hence get the first element\r\n    return {\r\n        champion: champion[0][1]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ChampionInfo);\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport NavBar from './components/navigation/NavBar';\nimport Footer from './components/navigation/Footer';\nimport Home from './components/home/Home';\nimport ChampionInfo from './components/home/ChampionInfo';\n\nfunction App() {\n  return (\n    <BrowserRouter >\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/champion/:champName\" component={ChampionInfo} />\n        </Switch>\n        <Footer />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\n\nimport axios from 'axios';\nimport apiKey from './apiKey';\n\n// Object data structure:\n// {\n//     championData: {\n//         [\n//             champName : string,\n//             champData : [\n//                 name : ...\n//                 key : ...\n//             ]\n//         ],\n//         [...]\n//     }\n// }\n\naxios.get(`https://solomid-resources.s3.amazonaws.com/blitz/tft/data/champions.json?api_key=${apiKey}`)\n    .then(res => {\n        // Grab each property and store inside a single array\n        renderApp({ championData: Object.entries(res.data) });\n    })\n    .catch(err => {\n        console.log(err, 'index.js');\n        renderApp({ championData: [] });\n    }\n);\n\nconst renderApp = (initialReducerState) => {\n    const store = createStore(rootReducer, initialReducerState);\n    console.log(store.getState(), 'index.js');\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>, \n        document.getElementById('root')\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","const API_KEY = 'RGAPI-978ac3cc-3162-47e8-94c8-13346d3b52d8';\r\n\r\nexport default API_KEY;"],"sourceRoot":""}